# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pymongo import MongoClient

db_uri = "mongodb://localhost:27017/"
client = MongoClient(db_uri)
db = client.BDD
world = db.world


# /*************************qst1: nombre exact des pays***************************/
def qst1():
    num = len(world.distinct("Name"))
    return num

# /*************************qst2: lister les different continents***************************/
def qst2():
    listt = world.distinct("Continent")
    return listt

# /*************************qst3:  Lister les informations de l’Algérie ***************************/
def qst3():
    text = world.find_one({"Name": "Algeria"})
    return text

# /*************************qst4:   Lister les pays du continent Africain, ayant une population inférieure à 100000 habitants  ***************************/
def qst4():
    countries = set()
    for rep3 in (world.find({"Continent": "Africa", "Population": {"$lt": 100000}})):
        countries.add(rep3["Name"])
    return countries

# /*************************qst5:   Lister les pays indépendant du continent océanique***************************/
def qst5():
    countries = set()
    for post in (world.find({"Continent": "Oceania", "IndepYear": {"$ne": "NA"}})):
        countries.add(post["Name"])
        return countries

# /*************************qst6:   Quel est le plus gros continent en termes de surface ?***************************/
def qst6():
    p = world.aggregate(
        [{'$group': {'_id': "$Continent", 'Surface': {'$sum': '$SurfaceArea'}}}, {'$sort': {'Surface': -1}},
         {'$limit': 1}])
    for x in p:
        continent = x
    return x

# /****qst7:    Donner par continents le nombre de pays, la population totale et en bonus le nombre de pays indépendant ?****/
def qst7():
    return list(world.aggregate(
        [{"$group": {"_id": "$Continent", "count": {"$sum": 1}, "population": {"$sum": "$Population"}}}]))

# /*************************qst8:    Donner la population totale des villes d’Algérie  ?***************************/
def qst8():
    return list(world.aggregate([{"$match": {"Name": "Algeria"}}, {"$unwind": "$Cities"},
                                    {"$group": {"_id": "$Cities", "population_total": {"$sum": "$Population"}}}]))

# /*************************qst9:     Donner la capitale (uniquement nom de la ville et population) d’Algérie   ?***************************/
def qst9():
    capital = world.find_one({"Name": "Algeria"})["Capital"]
    cap_info = []
    cap_info.append(capital["Name"])
    cap_info.append(capital["Population"])
    return cap_info

# /*************************qst10:   Quelles sont les langues parlées dans plus de 15 pays   ?***************************/
def getLanguage(x):
    lang = []
    if ("NotOffLang" in x and "OffLang" in x):
        for i in x["NotOffLang"]:
            if (i["Percentage"] != 0):
                lang.append(i["Language"])
        for i in x["OffLang"]:
            if (i["Percentage"] != 0):
                lang.append(i["Language"])
    elif ("NotOffLang" in x):
        for i in x["NotOffLang"]:
            if (i["Percentage"] != 0):
                lang.append(i["Language"])
    elif ("OffLang" in x):
        for i in x["OffLang"]:
            if (i["Percentage"] != 0):
                lang.append(i["Language"])
    return lang

def qst10():
    print("here")
    languages = {}
    for x in world.find():
        for y in (getLanguage(x)):
            print(y)
            if (y not in languages.keys()):
                languages[y] = 1
            else:
                languages[y] += 1
    langs = []
    for lang in languages.keys():
        if (languages[lang] > 15):
            langs.append(lang)
    return langs

# /****qst11:    Calculer pour chaque pays le nombre de villes (pour les pays ayant au moins 100 villes), en les triant par ordre décroissant du nombre de villes    ?****/
def qst11():
    return list(world.aggregate(
        [{"$unwind": "$Cities"}, {"$group": {"_id": "$Name", "count": {"$sum": 1}}}, {'$sort': {'count': -1}},
         {'$match': {"count": {'$gt': 100}}}]))

# /****qst12:    Lister les 10 villes les plus habitées, ainsi que leur pays, dans l’ordre décroissant de la population   ?****/
def qst12():
    villes = []
    pipe = [{'$unwind': "$Cities"}, {'$sort': {"Cities.Population": -1}}, {'$limit': 10},
            {'$project': {"_id": "$Cities.Name", "Country": "$Name", "City Population": "$Cities.Population"}}]
    for post in world.aggregate(pipeline=pipe):
        villes.append(post)
    return villes

# /*************************qst13:    Lister les pays pour lesquels l’Arabe est une langue officielle    ?***************************/
def qst13():
    p = world.find({"OffLang.Language": {'$eq': "Arabic"}}, {"Name": 1})
    countries = []
    for rep13 in p:
        countries.append(rep13["Name"])
    return countries

# /*************************qst14:    Lister les 5 pays avec le plus de langues parlées    ?***************************/
def qst14():
    countries = []
    pipe = [{'$addFields': {"c": {'$concatArrays': ["$OffLang", "$NotOffLang"]}}},
            {'$addFields': {"langs": {'$size': {"$ifNull": ["$c", []]}}}}, {'$sort': {"langs": -1}}, {'$limit': 5},
            {'$group': {"_id": "$Name"}}]

    for post in world.aggregate(pipeline=pipe):
        countries.append(post["_id"])
    return countries

# /****qst15:     Lister les pays pour lesquels la somme des populations des villes est supérieure à la population du pays   ?****/
def qst15():
    countries = []
    pipe = [{
        '$addFields': {"somme": {'$sum': "$Cities.Population"}}
    },
        {
            '$addFields': {"comp": {'$cmp': ['$somme', '$Population']}}
        },
        {'$match': {"comp": {'$gt': 1}}},
        {
            '$project': {
                "_id": "$Name",
                "Total Cities Population": "$somme",
                "Country Population": "$Population"
            }
        }]

    for post in world.aggregate(pipeline=pipe):
        countries.append(post["_id"])

    return countries

class Ui_Dialog(object):
    def Action(self):
        if(self.comboBox.currentText()=="Question 1"):
            p = qst1()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 2"):
            p = qst2()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 3"):
            p = qst3()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 4"):
            p = qst4()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 5"):
            p = qst5()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 6"):
            p = qst6()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 7"):
            p = qst7()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 8"):
            p = qst8()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 9"):
            p = qst9()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 10"):
            p = qst10()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 11"):
            p = qst11()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 12"):
            p = qst12()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 13"):
            p = qst13()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 14"):
            p = qst14()
            self.textEdit_2.setText(str(p))
        elif (self.comboBox.currentText() == "Question 15"):
            p = qst15()
            self.textEdit_2.setText(str(p))
    def Action2(self):
        if (self.comboBox.currentText() == "Question 1"):
            self.textEdit.setText("Déterminer le nombre exact de pays")
        elif (self.comboBox.currentText() == "Question 2"):
            self.textEdit.setText("Lister les différents continents")
        elif (self.comboBox.currentText() == "Question 3"):
            self.textEdit.setText("Lister les informations de l’Algérie")
        elif (self.comboBox.currentText() == "Question 4"):
            self.textEdit.setText("Lister les pays du continent Africain, ayant une population inférieure à 100000 habitants")
        elif (self.comboBox.currentText() == "Question 5"):
            self.textEdit.setText("Lister les pays indépendant du continent océanique")
        elif (self.comboBox.currentText() == "Question 6"):
            self.textEdit.setText("Quel est le plus gros continent en termes de surface ?")
        elif (self.comboBox.currentText() == "Question 7"):
            self.textEdit.setText("Donner par continents le nombre de pays, la population totale et en bonus le nombre de pays indépendant")
        elif (self.comboBox.currentText() == "Question 8"):
            self.textEdit.setText("Donner la population totale des villes d’Algérie")
        elif (self.comboBox.currentText() == "Question 9"):
            self.textEdit.setText("Donner la capitale (uniquement nom de la ville et population) d’Algérie")
        elif (self.comboBox.currentText() == "Question 10"):
            self.textEdit.setText("Quelles sont les langues parlées dans plus de 15 pays ?")
        elif (self.comboBox.currentText() == "Question 11"):
            self.textEdit.setText("Calculer pour chaque pays le nombre de villes (pour les pays ayant au moins 100 villes), en les triant par ordre décroissant du nombre de villes")
        elif (self.comboBox.currentText() == "Question 12"):
            self.textEdit.setText("Lister les 10 villes les plus habitées, ainsi que leur pays, dans l’ordre décroissant de la population")
        elif (self.comboBox.currentText() == "Question 13"):
            self.textEdit.setText("Lister les pays pour lesquels l’Arabe est une langue officielle")
        elif (self.comboBox.currentText() == "Question 14"):
            self.textEdit.setText("Lister les 5 pays avec le plus de langues parlées")
        elif (self.comboBox.currentText() == "Question 15"):
            self.textEdit.setText("Lister les pays pour lesquels la somme des populations des villes est supérieure à la population du pays")


    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(830, 673)
        Dialog.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.681, y2:0.778, stop:0.29902 rgba(11, 135, 147, 1) , stop:1 rgba(54, 0, 51, 1));")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(580, 390, 171, 71))
        self.pushButton.clicked.connect(self.Action)
        self.pushButton.setStyleSheet("background-color: rgb(11, 135, 147);\n"
                                      "border-color: rgb(255, 255, 255);\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "border-radius: 25px;\n"
                                      "border: 4px solid white;")
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(28)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.681, y2:0.778, stop:0.29902 rgba(0, 0, 0, 0), stop:1 rgba(0, 0, 0, 0));\n"
            "color: rgb(255, 255, 255);")
        self.comboBox.setGeometry(QtCore.QRect(520, 180, 271, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.currentTextChanged.connect(self.Action2)
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(80, 160, 431, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.textEdit.setFont(font)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(253, 253, 253, 255), stop:1 rgba(255, 255, 255, 255),);\n"
            "border-radius: 25px;")
        self.textEdit_2 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_2.setGeometry(QtCore.QRect(60, 340, 491, 291))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(253, 253, 253, 255), stop:1 rgba(255, 255, 255, 255));\n""border-radius: 25px;")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(80, 90, 251, 71))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.681, y2:0.778, stop:0.29902 rgba(0, 0, 0, 0), stop:1 rgba(0, 0, 0, 0));\n"
            "color: rgb(255, 255, 255);")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(60, 260, 251, 71))
        self.label_2.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0.681, y2:0.778, stop:0.29902 rgba(0, 0, 0, 0), stop:1 rgba(0, 0, 0, 0));\n"
            "color: rgb(255, 255, 255);")
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "Execute"))
        self.comboBox.setItemText(0, _translate("Dialog", "Choisi la question"))
        self.comboBox.setItemText(1, _translate("Dialog", "Question 1"))
        self.comboBox.setItemText(2, _translate("Dialog", "Question 2"))
        self.comboBox.setItemText(3, _translate("Dialog", "Question 3"))
        self.comboBox.setItemText(4, _translate("Dialog", "Question 4"))
        self.comboBox.setItemText(5, _translate("Dialog", "Question 5"))
        self.comboBox.setItemText(6, _translate("Dialog", "Question 6"))
        self.comboBox.setItemText(7, _translate("Dialog", "Question 7"))
        self.comboBox.setItemText(8, _translate("Dialog", "Question 8"))
        self.comboBox.setItemText(9, _translate("Dialog", "Question 9"))
        self.comboBox.setItemText(10, _translate("Dialog", "Question 10"))
        self.comboBox.setItemText(11, _translate("Dialog", "Question 11"))
        self.comboBox.setItemText(12, _translate("Dialog", "Question 12"))
        self.comboBox.setItemText(13, _translate("Dialog", "Question 13"))
        self.comboBox.setItemText(14, _translate("Dialog", "Question 14"))
        self.comboBox.setItemText(15, _translate("Dialog", "Question 15"))
        self.label.setText(_translate("Dialog", "La question:"))
        self.label_2.setText(_translate("Dialog", "La reponse:"))

if __name__ =="__main__":
    import sys
    app=QtWidgets.QApplication(sys.argv)
    Form=QtWidgets.QWidget()
    ui=Ui_Dialog()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
